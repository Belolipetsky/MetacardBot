# handlers/card.py
from aiogram import Router, types, exceptions
from aiogram.filters import Text
from utils.storage import get_attempts, use_attempt, add_attempts, log_action
from utils.keyboards import pull_card_confirmation_keyboard, buy_keyboard, card_options_keyboard
from utils.storage import log_action

router = Router()

# –°–ª–æ–≤–∞—Ä—å –æ–ø–∏—Å–∞–Ω–∏–π –∫–∞—Ä—Ç
card_descriptions = {
    "1": "üîÆ –ö–∞—Ä—Ç–∞ 1: –°–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è –∏ —Å–≤–µ–∂–∏–π –≤–∑–≥–ª—è–¥ –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é.",
    "2": "üîÆ –ö–∞—Ä—Ç–∞ 2: –ì–æ–≤–æ—Ä–∏—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º.",
    "3": "üîÆ –ö–∞—Ä—Ç–∞ 3: –£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–∞—à—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏–ª—É –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ."
}

@router.message(Text(text="üîÆ –í—ã—Ç—è–Ω—É—Ç—å –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É", ignore_case=True))
async def initiate_card_flow(message: types.Message):
    user_id = message.from_user.id
    text = (
        "üîÆ –ú–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã ‚Äì —ç—Ç–æ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è.\n"
        "–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ—Å—ë—Ç –ø–æ—Å–ª–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é —Å –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è.\n"
        "üí° –ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∂–µ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∞?"
    )
    await message.answer(text, reply_markup=pull_card_confirmation_keyboard)

@router.message(Text(text="–î–∞, –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É", ignore_case=True))
async def pull_card(message: types.Message):
    user_id = message.from_user.id
    attempts = get_attempts(user_id)
    if attempts > 0:
        instruction = (
            "üìå –î–ª—è –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –ø–µ—Ä–µ–π–¥–∏ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π Telegram-–∫–∞–Ω–∞–ª —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –∫–∞—Ä—Ç:\n"
            "https://t.me/your_channel_link\n"
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—É, –∑–∞–ø–æ–º–Ω–∏ –µ—ë –Ω–æ–º–µ—Ä –∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –±–æ—Ç, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã."
        )
        await message.answer(instruction)
        log_action(user_id, "pull_card_initiated", "User has attempts and was sent instructions.")
    else:
        purchase_text = (
            "üí≥ –î–ª—è –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n"
            "üîπ 1 –∫–∞—Ä—Ç–∞ ‚Äì 89‚ÇΩ (–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å)\n"
            "üîπ 5 –∫–∞—Ä—Ç ‚Äì 356‚ÇΩ (–≠–∫–æ–Ω–æ–º–∏—è 20%)\n"
            "üîπ 10 –∫–∞—Ä—Ç ‚Äì 699‚ÇΩ (–°–∞–º–∞—è –≤—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞!)\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:"
        )
        await message.answer(purchase_text, reply_markup=buy_keyboard)

@router.message(lambda message: message.text and message.text.isdigit())
async def process_card_choice(message: types.Message):
    user_id = message.from_user.id
    if get_attempts(user_id) <= 0:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—É–ø–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É.")
        return
    card_number = message.text.strip()
    description = card_descriptions.get(card_number, "‚ùå –ö–∞—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    if use_attempt(user_id):
        await message.answer(description)
        follow_up = (
            "üîÆ –ü–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—É? –ö–∞–∫ –¥—É–º–∞–µ—à—å, —á—Ç–æ –æ–Ω–∞ –∑–Ω–∞—á–∏—Ç?\n"
            "–ß–∞—Å—Ç–æ –∏—Å—Ç–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ —Å–≤—è–∑—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞—Ä—Ç.\n"
            "üåü –ü–æ–ø—Ä–æ–±—É–π –≤—ã—Ç—è–Ω—É—Ç—å –µ—â—ë –æ–¥–Ω—É –∫–∞—Ä—Ç—É ‚Äì —ç—Ç–æ –º–æ–∂–µ—Ç –¥–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏."
        )
        await message.answer(follow_up, reply_markup=card_options_keyboard)
        log_action(user_id, "card_pulled", f"Card number: {card_number}")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—É–ø–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É.")

@router.message(Text(text="–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É", ignore_case=True))
async def bonus_free_card(message: types.Message):
    user_id = message.from_user.id
    BONUS_CHANNEL = "your_channel_username"  # –£–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @
    try:
        member = await message.bot.get_chat_member(f"@{BONUS_CHANNEL}", user_id)
        if member.status in ["member", "creator", "administrator"]:
            add_attempts(user_id, 1)
            await message.answer("üì¢ –î–∞—Ä—é —Ç–µ–±–µ 1 –∫–∞—Ä—Ç—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ!")
            log_action(user_id, "bonus_card", "User received a free card for subscription.")
        else:
            await message.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except exceptions.TelegramBadRequest:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
