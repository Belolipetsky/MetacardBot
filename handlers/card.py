from aiogram import Router, types, exceptions
from aiogram.filters import Text
from utils.storage import get_attempts, use_attempt, add_attempts
from utils.keyboards import buy_keyboard, card_options_keyboard
router = Router()

# –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∫–∞—Ä—Ç
card_descriptions = {
    "1": "üîÆ –ö–∞—Ä—Ç–∞ 1: –°–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è –∏ —Å–≤–µ–∂–∏–π –≤–∑–≥–ª—è–¥ –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é.",
    "2": "üîÆ –ö–∞—Ä—Ç–∞ 2: –ì–æ–≤–æ—Ä–∏—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º.",
    "3": "üîÆ –ö–∞—Ä—Ç–∞ 3: –£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–≤–æ—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏–ª—É –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å."
}

# –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "üîÆ –í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É" –≤—ã–≤–æ–¥–∏—Ç—Å—è –∏–Ω—Ç—Ä–æ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É
@router.message(Text(text="üîÆ –í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É", ignore_case=True))
async def card_intro(message: types.Message):
    text = (
        "üîÆ –ú–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã ‚Äì —ç—Ç–æ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è.\n"
        "–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ—Å—ë—Ç –ø–æ—Å–ª–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é —Å –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è.\n"
        "üí° –ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∂–µ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∞?\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    )
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–î–∞, –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É!"
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–î–∞, –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É!")]],
        resize_keyboard=True
    )
    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–∞, –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É!"
@router.message(Text(text="–î–∞, –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É!", ignore_case=True))
async def pull_card_handler(message: types.Message):
    user_id = message.from_user.id
    if get_attempts(user_id) > 0:
        text = (
            "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É, –ø–µ—Ä–µ–π–¥–∏ –≤ –Ω–∞—à –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –∫–∞—Ä—Ç:\n"
            "üëâ https://t.me/+Io5-yW5dgyEyNjhi\n\n"
            "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –≤–µ—Ä–Ω–∏—Å—å –≤ –±–æ—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1, 2 –∏–ª–∏ 3)."
        )
        await message.answer(text)
    else:
        text = (
            "–£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã.\n"
            "üí≥ –î–ª—è –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n"
            "–ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?\n"
            "üîπ 1 –∫–∞—Ä—Ç–∞ ‚Äì 89‚ÇΩ (–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å)\n"
            "üîπ 5 –∫–∞—Ä—Ç ‚Äì 356‚ÇΩ (–≠–∫–æ–Ω–æ–º–∏—è 20%)\n"
            "üîπ 10 –∫–∞—Ä—Ç ‚Äì 699‚ÇΩ (–°–∞–º–∞—è –≤—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞!)"
        )
        await message.answer(text, reply_markup=buy_keyboard)

# –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã (—Ü–∏—Ñ—Ä–∞)
@router.message(lambda message: message.text.isdigit())
async def card_choice(message: types.Message):
    user_id = message.from_user.id
    if get_attempts(user_id) <= 0:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å.")
        return
    card_number = message.text.strip()
    description = card_descriptions.get(card_number, "‚ùå –ö–∞—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    if use_attempt(user_id):
        await message.answer(description)
        follow_text = (
            "üîÆ –ü–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—É? –ö–∞–∫ –¥—É–º–∞–µ—à—å, —á—Ç–æ –æ–Ω–∞ –∑–Ω–∞—á–∏—Ç?\n"
            "–ß–∞—Å—Ç–æ –∏—Å—Ç–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ —Å–≤—è–∑—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞—Ä—Ç.\n"
            "üåü –ü–æ–ø—Ä–æ–±—É–π –≤—ã—Ç—è–Ω—É—Ç—å –µ—â—ë –æ–¥–Ω—É –∫–∞—Ä—Ç—É ‚Äì —ç—Ç–æ –º–æ–∂–µ—Ç –¥–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏."
        )
        await message.answer(follow_text, reply_markup=card_options_keyboard)
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Ç
@router.message(Text(text="–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É", ignore_case=True))
async def bonus_card(message: types.Message):
    user_id = message.from_user.id
    if get_attempts(user_id) == 0:
        add_attempts(user_id, 1)
        await message.answer("üì¢ –î–∞—Ä—é —Ç–µ–±–µ 1 –∫–∞—Ä—Ç—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ!")
    else:
        await message.answer("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã.")

