# handlers/card.py
from aiogram import Router, types, exceptions
from aiogram.filters import Text
from utils.storage import get_attempts, use_attempt, add_attempts
from utils.keyboards import buy_keyboard, card_options_keyboard

router = Router()

card_descriptions = {
    "1": "üîÆ –ö–∞—Ä—Ç–∞ 1: –°–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è –∏ —Å–≤–µ–∂–∏–π –≤–∑–≥–ª—è–¥ –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é.",
    "2": "üîÆ –ö–∞—Ä—Ç–∞ 2: –ì–æ–≤–æ—Ä–∏—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º.",
    "3": "üîÆ –ö–∞—Ä—Ç–∞ 3: –£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–∞—à—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏–ª—É –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ."
}

@router.message(Text(text="üîÆ –í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É", ignore_case=True))
async def card_intro(message: types.Message):
    user_id = message.from_user.id
    attempts = get_attempts(user_id)
    if attempts > 0:
        text = (
            "‚ú® –ú–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã ‚Äî –∫–ª—é—á –∫ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—é! ‚ú®\n\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã—Ç—è–Ω—É—Ç—å:"
        )
        await message.answer(text)
    else:
        text = (
            "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏:\n"
            "üí≥ 1 –∫–∞—Ä—Ç–∞ ‚Äì 89‚ÇΩ\n"
            "üí≥ 5 –∫–∞—Ä—Ç ‚Äì 356‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 20%)\n"
            "üí≥ 10 –∫–∞—Ä—Ç ‚Äì 699‚ÇΩ\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:"
        )
        await message.answer(text, reply_markup=buy_keyboard)

@router.message(lambda message: message.text and message.text.isdigit())
async def card_choice(message: types.Message):
    user_id = message.from_user.id
    if get_attempts(user_id) <= 0:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—É–ø–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.")
        return
    card_number = message.text.strip()
    description = card_descriptions.get(card_number, "‚ùå –ö–∞—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    if use_attempt(user_id):
        await message.answer(description)
        follow_text = (
            "üîÆ –ü–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç—É? –ö–∞–∫ –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ –æ–Ω–∞ –∑–Ω–∞—á–∏—Ç?\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã—Ç—è–Ω—É—Ç—å –µ—â—ë –æ–¥–Ω—É –∫–∞—Ä—Ç—É –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è, –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await message.answer(follow_text, reply_markup=card_options_keyboard)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—É–ø–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.")

@router.message(Text(text="–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É", ignore_case=True))
async def bonus_card(message: types.Message):
    user_id = message.from_user.id
    BONUS_CHANNEL = "@your_channel_username"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
    try:
        member = await message.bot.get_chat_member(BONUS_CHANNEL, user_id)
        if member.status in ["member", "creator", "administrator"]:
            add_attempts(user_id, 1)
            await message.answer("‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª!")
        else:
            await message.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except exceptions.TelegramBadRequest:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
