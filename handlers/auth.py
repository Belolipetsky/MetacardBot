# handlers/auth.py
from aiogram import Router, types
from aiogram.filters import Command
from utils.storage import register_user
from utils.spreadsheet import log_registration
from utils.keyboards import phone_keyboard, main_menu_keyboard
import logging

router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
pending_phones = {}

@router.message(Command("start"))
async def start_handler(message: types.Message):
    welcome_text = (
        "‚ú® –ü—Ä–∏–≤–µ—Ç, —è –ú–∞—à–∞!\n"
        "–Ø —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–µ–π—Ä–æ–≥—Ä–∞—Ñ–∏–∫–µ –∏ –∑–Ω–∞—é, –∫–∞–∫ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —É–≤–∏–¥–µ—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç.\n\n"
        "–ß—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç?\n"
        "üñä –ü–æ–º–æ–≥–∞–µ—Ç –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥ –¥—Ä—É–≥–∏–º —É–≥–ª–æ–º\n"
        "üîÆ –î–æ—Å—Ç–∞—ë—Ç –∏–∑ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã\n"
        "‚ö° –î–∞—ë—Ç —è—Å–Ω–æ—Å—Ç—å, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π\n\n"
        "üí° –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º! –ß—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –ª—É—á—à–µ –ø–æ–º–æ—á—å —Ç–µ–±–µ, –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
        "üìå –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )
    await message.answer(welcome_text, reply_markup=phone_keyboard)

@router.message(lambda message: message.contact is not None)
async def contact_handler(message: types.Message):
    contact = message.contact
    phone = contact.phone_number
    user_id = message.from_user.id
    pending_phones[user_id] = phone
    await message.answer("‚ú® –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

@router.message(lambda message: message.contact is None)
async def name_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id not in pending_phones:
        return  # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    name = message.text.strip()
    phone = pending_phones.pop(user_id)
    username = message.from_user.username or ""
    register_user(user_id, username, name, phone)
    log_registration({
        "user_id": user_id,
        "username": username,
        "name": name,
        "phone": phone
    })
    await message.answer(
        f"‚ú® –°–ø–∞—Å–∏–±–æ, {name}! –¢–µ–ø–µ—Ä—å –≤—Å—ë –≥–æ—Ç–æ–≤–æ! –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –ø–æ–¥—Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ —Ç–≤–æ—è –∫–∞—Ä—Ç–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Å–≤–æ–∏—Ç—å –Ω–µ–π—Ä–æ–≥—Ä–∞—Ñ–∏–∫—É.",
        reply_markup=main_menu_keyboard
    )

